/* Generated By:JavaCC: Do not edit this line. ParserProlog.java */
package uniandes.teolen.parserJavaCC.ParserProlog;

import java.util.*;

public class ParserProlog implements ParserPrologConstants {
        ArrayList< String > sitios = new ArrayList< String >();
        ArrayList<String> transiciones = new ArrayList< String >();
        ArrayList< String > variables = new ArrayList< String >();

  final public void variable() throws ParseException, Exception {
    jj_consume_token(VARIABLE);
    jj_consume_token(PALABRA);
    jj_consume_token(DECLARAR);
    jj_consume_token(NUMERO);
  }

  final public void operacion() throws ParseException, Exception {
 Token var1 = null; Token var2 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
    case NUMERO:
    case PALABRA:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMERO:
        jj_consume_token(NUMERO);
        break;
      case PALABRA:
        var1 = jj_consume_token(PALABRA);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPERACION:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_1;
        }
        jj_consume_token(OPERACION);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMERO:
          jj_consume_token(NUMERO);
          break;
        case PALABRA:
          var2 = jj_consume_token(PALABRA);
          break;
        case 22:
          jj_consume_token(22);
          operacion();
          jj_consume_token(23);
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    case 22:
      jj_consume_token(22);
      operacion();
      jj_consume_token(23);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPERACION:
        jj_consume_token(OPERACION);
        operacion();
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
          if(var1!=null) {
            boolean encontre = false;
            for(String var: variables) {
              if(var.equals(var1.image)) {
                encontre = true;
              }
            }
            if(!encontre) {
              {if (true) throw new Exception("La variable " + var1.image + " nunca fue inicializada.");}
            }
          }
          if(var2!=null) {
            boolean encontre = false;
            for(String var: variables) {
              if(var.equals(var2.image)) {
                encontre = true;
              }
            }
            if(!encontre) {
              {if (true) throw new Exception("La variable " + var2.image + " nunca fue inicializada.");}
            }
          }
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void sitio() throws ParseException, Exception {
  Token sitio;
    jj_consume_token(SITIO);
    jj_consume_token(24);
    sitio = jj_consume_token(PALABRA);
    jj_consume_token(CAPACIDAD);
    jj_consume_token(ASIGNAR);
    operacion();
    jj_consume_token(MARCACION);
    jj_consume_token(ASIGNAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
    case NUMERO:
    case PALABRA:
    case 22:
      operacion();
      break;
    case CAPACIDAD:
      jj_consume_token(CAPACIDAD);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                sitios.add(sitio.image);
  }

  final public void transicion() throws ParseException, Exception {
  Token nom1 = null; Token nom2 = null;
    jj_consume_token(TRANSICION);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PALABRA:
      nom1 = jj_consume_token(PALABRA);
      break;
    case 22:
      jj_consume_token(22);
      nom2 = jj_consume_token(PALABRA);
      jj_consume_token(25);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNIOEXP:
        jj_consume_token(UNIOEXP);
        jj_consume_token(25);
        operacion();
        jj_consume_token(25);
        operacion();
        break;
      case DET:
        jj_consume_token(DET);
        jj_consume_token(25);
        operacion();
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(23);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     if(nom1 != null) {
          transiciones.add(nom1.image);
    }
    else if(nom2 != null) {
          transiciones.add(nom2.image);
    }
  }

  final public void arco() throws ParseException, Exception {
  Token param1; Token param2 = null; Token param3;
    jj_consume_token(ARC);
    jj_consume_token(22);
    param1 = jj_consume_token(PALABRA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 24:
      jj_consume_token(24);
      param2 = jj_consume_token(PALABRA);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    jj_consume_token(25);
    param3 = jj_consume_token(PALABRA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 25:
      jj_consume_token(25);
      operacion();
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    jj_consume_token(23);
    Token elPrimeroEs = param1;
    if(param2 != null) {
      elPrimeroEs = param2;
    }

    boolean esSitio1 = false;
    boolean esSitio2 = false;
    boolean esTrans1 = false;
    boolean esTrans2 = false;

    for(String sitio:sitios) {
      if(sitio.equals(elPrimeroEs.image)) {
        esSitio1 = true;
      }
      if(sitio.equals(param3.image)) {
        esSitio2 = true;
      }
    }
    System.out.println(elPrimeroEs.image + " " + param3.image);
    for(String trans:transiciones) {
      if(trans.equals(elPrimeroEs.image)) {
        esTrans1 = true;
      }
      if(trans.equals(param3.image)) {
        esTrans2 = true;
      }
    }

    if(esSitio1 && esSitio2) {
      {if (true) throw new Exception("No puede haber un arco entre dos sitios.");}
    }
    else if(esTrans1 && esTrans2) {
      {if (true) throw new Exception("No puede haber un arco entre dos transiciones.");}
    }
  }

  final public void hr() throws ParseException, Exception {
    jj_consume_token(COMIENZO);
    jj_consume_token(PALABRA);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_2;
      }
      variable();
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SITIO:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_3;
      }
      sitio();
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRANSICION:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_4;
      }
      transicion();
    }
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARC:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_5;
      }
      arco();
    }
    jj_consume_token(CIERRE);
  }

  /** Generated Token Manager. */
  public ParserPrologTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[15];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80,0x300000,0x100,0x700000,0x100,0x700080,0x702080,0x30000,0x600000,0x1000000,0x2000000,0x800,0x1000,0x8000,0x40000,};
   }

  /** Constructor with InputStream. */
  public ParserProlog(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ParserProlog(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserPrologTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ParserProlog(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserPrologTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ParserProlog(ParserPrologTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserPrologTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[26];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 15; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 26; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
