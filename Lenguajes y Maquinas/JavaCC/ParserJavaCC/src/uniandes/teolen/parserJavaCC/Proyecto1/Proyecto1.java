/* Generated By:JavaCC: Do not edit this line. Proyecto1.java */
package uniandes.teolen.parserJavaCC.Proyecto1;

public class Proyecto1 implements Proyecto1Constants {
        ArrayList < String > variables = new ArrayList<String>();
        ArrayList < String > sitios = new ArrayList<String>();
        ArrayList < String > transiciones = new ArrayList<String>();

  static final public void pRed() throws ParseException {
    jj_consume_token(P_RED);
    jj_consume_token(nombre);
    label_1:
    while (true) {
      var();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    label_2:
    while (true) {
      sitio();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SITIO:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
    }
    label_3:
    while (true) {
      transicion();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRANSICION:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
    }
    label_4:
    while (true) {
      arco();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARCO:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_4;
      }
    }
    jj_consume_token(FIN_RED);
  }

  static final public void var() throws ParseException {
 Token t1; Token t2;
    jj_consume_token(VAR);
    jj_consume_token(nombre);
    jj_consume_token(IGUAL);
    jj_consume_token(num);
  }

  static final public void sitio() throws ParseException {
 Token t1; Token t2;
    jj_consume_token(SITIO);
    jj_consume_token(DOS_PUNTOS);
    t1 = jj_consume_token(nombre);
    jj_consume_token(CAPACIDAD);
    jj_consume_token(DOS_PUNTOS);
    jj_consume_token(IGUAL);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case num:
      jj_consume_token(num);
      break;
    case holi:
      jj_consume_token(holi);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(MARCACION);
    jj_consume_token(DOS_PUNTOS);
    jj_consume_token(IGUAL);
    jj_consume_token(holi);
  if(t1!=null)
  {

    boolean encontro = false;
    for (String sitio: sitios)
    {
      if(sitio.equals(t1.image))
      {
        encontro = true;
      }
    }
    if(!encontro)
    {
      sitios.add(t1);
    }
}
  }

  static final public void transicion() throws ParseException {
 Token t1; Token t2;
    jj_consume_token(TRANSICION);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case nombre:
      jj_consume_token(nombre);
      break;
    case TRANSICION:
      jj_consume_token(TRANSICION);
      jj_consume_token(AP);
      jj_consume_token(nombre);
      jj_consume_token(COMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXPONENCIAL:
        jj_consume_token(EXPONENCIAL);
        break;
      case DETERMINISTICO:
        jj_consume_token(DETERMINISTICO);
        break;
      case UNIFORME:
        jj_consume_token(UNIFORME);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(COMA);
      jj_consume_token(holi);
      jj_consume_token(COMA);
      jj_consume_token(holi);
      jj_consume_token(CP);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void arco() throws ParseException {
    jj_consume_token(ARCO);
    jj_consume_token(AP);
    jj_consume_token(holi);
    jj_consume_token(COMA);
    jj_consume_token(holi);
    jj_consume_token(COMA);
    jj_consume_token(holi);
    jj_consume_token(CP);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public Proyecto1TokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[7];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x400,0x800,0x1000,0x2000,0x6000000,0x700000,0x80001000,};
   }

  /** Constructor with InputStream. */
  public Proyecto1(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Proyecto1(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new Proyecto1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Proyecto1(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new Proyecto1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Proyecto1(Proyecto1TokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(Proyecto1TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[32];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 7; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 32; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
