/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{
  IGNORE_CASE = false;  STATIC = false;}PARSER_BEGIN(Proyecto1)package uniandes.teolen.parserJavaCC.Proyecto1;
import java.util.*;
public class Proyecto1{	ArrayList < String > variables = new ArrayList<String>();
	ArrayList < String > sitios = new ArrayList<String>();
	ArrayList < String > transiciones = new ArrayList<String>();}PARSER_END(Proyecto1)SKIP :
{
 	" " | "\r" | "\t" | "\n"

}TOKEN : /* OPERATORS */{ < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < DOS_PUNTOS : ":" >
| < IGUAL: "=" >
| < COMA : "," >
| < AP : "(" >
| < CP : ")" >
| < VAR:  "VAR" >
| < UNIFORME : "Uniforme" >
| < EXPONENCIAL : "Exponencial" >
| < DETERMINISTICO : "Deterministico" >
| < CAPACIDAD : "capacidad" >
| < MARCACION : "marcacion_i" >
| < holi : "holi" >
| < ARCO : "ARCO" >
| < TRANSICION : "TRANSICION" >
| < SITIO : "SITIO" >
| < P_RED : "P_RED" >
| < FIN_RED : "FIN_RED" >}TOKEN :{
 < #DIGIT : [ "0"-"9" ] >| < num : (< DIGIT >)+ >
| < #LETRAMAY : [ "A"-"Z" ] >
| < #LETRAMIN : [ "a"-"z" ] >
| < #LETRA : (< LETRAMIN > | < LETRAMAY >) >
//| < NOMBRE : < LETRA > (< LETRA > | < num >)* >
| < NOMBRE: (["A"-"z"])+(["0"-"9"])*>
}

void pRed() throws Error:
{ } 
{
  < P_RED ><NOMBRE >
  (var())*
  (sitio())*
  (transicion())*
  (arco())*
  < FIN_RED >
}

void var() throws Error:
{Token t1;}
{
 < VAR >(t1=<NOMBRE >)<IGUAL ><num >
{
   boolean encontrado = false; 
   for(int i = 0; i<variables.size() && !encontrado; i++) {
     if(variables.get(i).equals(t1.image)) {
      encontrado = true; 
 } }
   if(encontrado) { throw new Error("La variable ya se encontraba declarada previamente :c"); }
   else {  variables.add(t1.image); }
}


}
 



void sitio():
{Token t1; Token v; String variable;}
{
  <SITIO ><DOS_PUNTOS > (t1= < NOMBRE >)
 {
   boolean encontrado = false; 
   for(int i = 0; i<sitios.size() && !encontrado; i++) {
     if(sitios.get(i).equals(t1.image)) {
       encontrado = true; 
   }
   if(encontrado) { throw new Error("El sitio ya se encontraba declarada previamente :c"); }
   else { sitios.add(t1.image); }
   }
}
 <CAPACIDAD ><DOS_PUNTOS ><IGUAL >(< num >| ((verificarVar())((< PLUS >|< MINUS >|< MULTIPLY >|< DIVIDE >)(verificarVar()))?)


)<MARCACION ><DOS_PUNTOS ><IGUAL >(<num >|< CAPACIDAD >) 
}


void transicion():
{Token t; Token t1;}
{
 < TRANSICION >

 (((t = < NOMBRE >)
 {
    //Solo crea transiciones si no existen antes. 
   boolean encontrado1 = false; 
   for(int i = 0; i<transiciones.size() && !encontrado1; i++) {
     if(transiciones.get(i).equals(t.image)) {
       encontrado1 = true; 
   }
   if(encontrado1) { throw new Error("La transicion ya se encontraba declarada previamente :c"); }
   else { transiciones.add(t.image); }
   }  
 }
 )

 |


 (<AP>(t1 = < NOMBRE >)
 {
   //Solo crea transiciones si no existen antes. 
   boolean encontrado = false; 
   for(int i = 0; i<transiciones.size() && !encontrado; i++) {
     if(transiciones.get(i).equals(t1.image)) {
       encontrado = true; 
   }
   if(encontrado) { throw new Error("La transicion ya se encontraba declarada previamente :c"); }
   else { transiciones.add(t1.image); }
   }  
 }
 <COMA >
 ((< EXPONENCIAL ><COMA > dobleParametro()) |(<DETERMINISTICO ><COMA >parametro())|(<UNIFORME ><COMA >dobleParametro()))
 <CP >
 )
)
}

void dobleParametro():
{}
{
  parametro() < COMA > parametro()
}

void parametro():
{}
{
  exp()
}
void arco():
{}
{
 < ARCO ><AP >
(  LOOKAHEAD(2)arcoEntrando()| arco2())< CP >
}

void arcoEntrando():
{Token t1; Token t2; Token t3;}
{
  
  t3=< NOMBRE >< DOS_PUNTOS > t1 = < NOMBRE >< COMA >t2 = < NOMBRE >
{
    Boolean sitio1 = false;
    Boolean sitio2 = false;
    Boolean transicion1 = false;
    Boolean transicion2 = false;
    
      boolean encontrado1 = false; 
   for(int i = 0; i<transiciones.size() && !encontrado1; i++) {
     if(transiciones.get(i).equals(t1.image)) {
       encontrado1 = true;
       transicion1=true; 
   }
   if(!encontrado1) { throw new Error("La variable no existe :'v"); }
   }

   for(int i = 0; i<sitios.size() && !encontrado1; i++) {
     if(sitios.get(i).equals(t1.image)) {
       encontrado1 = true;
       sitio1=true; 
   }
   if(!encontrado1) { throw new Error("La variable no existe :'v"); }
 }

 boolean encontrado2 = false; 
   for(int i = 0; i<transiciones.size() && !encontrado2; i++) {
     if(transiciones.get(i).equals(t2.image)) {
       encontrado2 = true;
       transicion2=true; 
   }
   if(!encontrado2) { throw new Error("La variable no existe :'v"); }
   }

   for(int i = 0; i<sitios.size() && !encontrado2; i++) {
     if(sitios.get(i).equals(t2.image)) {
       encontrado2 = true;
       sitio2=true;
   }
   if(!encontrado2) { throw new Error("La variable no existe :'v"); }
 }


 if((sitio1&&sitio2)||(transicion1&&transicion2))
 {
throw new Error("No puede haber arcos entre dos elementos del mismo tipo.");
 } 
 }
}

void arco2():
{Token t1; Token t2;}
{
  t1 = < NOMBRE >< COMA >t2 = < NOMBRE >(< COMA >parametro())?
  //< num >((< PLUS >|< MINUS >|< MULTIPLY >|< DIVIDE >)< NOMBRE >)?)?
  {

    boolean sitio1 = false;
    boolean sitio2 = false;
    boolean transicion1 = false;
    boolean transicion2 = false;
    
      boolean encontrado1 = false; 
   for(int i = 0; i<transiciones.size() && !encontrado1; i++) {
     if(transiciones.get(i).equals(t1.image)) {
       encontrado1 = true;
       transicion1=true; 
   }
   if(!encontrado1) { throw new Error("La transicion no existe"); }
   }

   for(int i = 0; i<sitios.size() && !encontrado1; i++) {
     if(sitios.get(i).equals(t1.image)) {
       encontrado1 = true;
       sitio1=true; 
   }
   if(!encontrado1) { throw new Error("La variable no existe"); }
 }

 boolean encontrado2 = false; 
   for(int i = 0; i<transiciones.size() && !encontrado2; i++) {
     if(transiciones.get(i).equals(t2.image)) {
       encontrado2 = true;
       transicion2=true; 
   }
   if(!encontrado2) { throw new Error("La variable no existe"); }
   }

   for(int i = 0; i<sitios.size() && !encontrado2; i++) {
     if(sitios.get(i).equals(t2.image)) {
       encontrado2 = true;
       sitio2=true;
   }
   if(!encontrado2) { throw new Error("La variable no existe"); }
 }


 if((sitio1&&sitio2)||(transicion1&&transicion2))
 {
throw new Error("No puede haber arcos entre dos elementos del mismo tipo.");
 } 
}
}

void verificarVar():
{Token t;}
{
	(t = < NOMBRE >)
{
    //Si la variable no existe, sale un error
}
{
  boolean encontrado = false;
  boolean esNumber = false; 
   try {
     if(t.image.equals("Inf"))
     {
       return;
     }
  double d = Double.parseDouble( t.image );
  esNumber =  true; 
	}catch(Exception e ) {
  esNumber =  false; 
	}
	if(!esNumber) {
   for(int i = 0; i<variables.size() && !encontrado; i++) {
     if(variables.get(i).equals(t.image)) {
       encontrado = true; 
   } }
   if(!encontrado) { throw new Error("La variable " + t.image + " no existe"); }
    }
}
}


void exp() :
{}
{  
 term() ( < PLUS > term() | < MINUS > term() )*
}
void term():
{}
{  
 fact() ( < MULTIPLY > fact() | < DIVIDE > fact() )*
}

void fact() :
{}
{
    (< MINUS >)? ((< num > | verificarVar())| "(" exp() ")")
}

//No se hacen excepciones sino es error.
//t.image accede directamente al atributo del token. 